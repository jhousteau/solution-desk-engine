name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: |
        poetry run pytest --cov --cov-report=xml

    - name: Run security checks
      run: |
        poetry run bandit -r src/ -c .bandit || true
        poetry run gitleaks detect --verbose --no-banner || true

    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Update version in pyproject.toml
      run: |
        poetry version ${{ steps.version.outputs.version_number }}

    - name: Generate changelog for release
      id: changelog
      run: |
        # Extract changelog section for this version
        VERSION="${{ steps.version.outputs.version }}"
        CHANGELOG_SECTION=$(awk "/^## \[${VERSION#v}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)

        if [ -z "$CHANGELOG_SECTION" ]; then
          CHANGELOG_SECTION=$(awk '/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md)
        fi

        # Save to file for release notes
        echo "$CHANGELOG_SECTION" > release_notes.md

        # Also save to output for GitHub release
        {
          echo 'RELEASE_NOTES<<EOF'
          echo "$CHANGELOG_SECTION"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Create archive for release notes
      run: |
        # Copy current release notes to docs/releases/
        mkdir -p docs/releases
        cp release_notes.md "docs/releases/${{ steps.version.outputs.version }}.md"

    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml docs/releases/
        git commit -m "chore: release ${{ steps.version.outputs.version }}" || exit 0

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push changes
      run: |
        git push origin HEAD:main

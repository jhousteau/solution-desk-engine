# compose.yaml â€” Universal Hardened Dev Container for Genesis Projects
# Usage examples:
#   docker compose --profile cli up -d
#   docker compose --profile api up -d
#   docker compose --profile ts  up -d
#   docker compose logs -f dev
#   docker compose exec dev bash

name: solution-desk-engine-dev

# Common service settings via anchors
x-common: &common
  build:
    context: .
    dockerfile: Dockerfile
    # Build args are non-sensitive; secrets handled below
    args:
      NODE_MAJOR: 20
      POETRY_VERSION: 1.8.3
    secrets:
      # Provides GITHUB_TOKEN to the Dockerfile via BuildKit secret mount
      - github_token
  image: solution-desk-engine/dev:latest
  user: "1000:1000"
  working_dir: /workspace
  # Named volume for isolated workspace
  volumes:
    - workspace:/workspace
    # Persist caches to speed up installs
    - pip-cache:/home/developer/.cache/pip
    - poetry-cache:/home/developer/.cache/pypoetry
    - node-cache:/home/developer/.cache/node
    - direnv-config:/home/developer/.config/direnv
  environment:
    # Keep HOME sane; Poetry creates .venv in project by default
    HOME: /home/developer
    PYTHONUNBUFFERED: "1"
    PYTHONPATH: /workspace
    LOG_LEVEL: info
    ENABLE_GIT: "true"
    JAIL_MODE: cd-guard
  # Security hardening
  read_only: true
  cap_drop:
    - ALL
  security_opt:
    - no-new-privileges:true
  ulimits:
    nofile: 4096
    nproc: 1024
  tmpfs:
    - /tmp:rw,nosuid,nodev,noexec,size=64m
  # If you truly need a writable HOME, replace tmpfs with a named volume
  # and remove read_only or add additional bind mounts as necessary.
  healthcheck:
    test: ["CMD", "bash", "-lc", "command -v python >/dev/null && command -v node >/dev/null && [ -d /workspace ]"]
    interval: 30s
    timeout: 5s
    start_period: 10s
    retries: 3
  # Keep container running; override per-profile as needed
  command: ["bash", "-lc", "tail -f /dev/null"]

services:
  # Single service, multiple profiles. Pick one profile at a time.
  dev:
    <<: *common
    container_name: solution-desk-engine-dev
    # Choose one profile when starting (cli, api, or ts)
    profiles: ["cli"]
    environment:
      # Keep HOME sane; Poetry creates .venv in project by default
      HOME: /home/developer
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /workspace
      LOG_LEVEL: info
      ENABLE_GIT: "true"
      PROJECT_NAME: solution-desk-engine
      PROJECT_TYPE: cli-tool
      PROJECT_MODE: development
    # Open a shell with: docker compose --profile cli exec dev bash

  api:
    <<: *common
    container_name: solution-desk-engine-api
    profiles: ["api"]
    environment:
      # Keep HOME sane; Poetry creates .venv in project by default
      HOME: /home/developer
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /workspace
      LOG_LEVEL: info
      ENABLE_GIT: "true"
      PROJECT_NAME: solution-desk-engine
      PROJECT_TYPE: python-api
      PROJECT_MODE: development
    ports:
      - "8719:8719"   # Hash-generated unique port
    command: ["bash", "-lc", "poetry run uvicorn solution_desk_engine.main:app --host 0.0.0.0 --port 8719 --reload"]

  ts:
    <<: *common
    container_name: solution-desk-engine-ts
    profiles: ["ts"]
    environment:
      # Keep HOME sane; Poetry creates .venv in project by default
      HOME: /home/developer
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /workspace
      LOG_LEVEL: info
      ENABLE_GIT: "true"
      PROJECT_NAME: solution-desk-engine
      PROJECT_TYPE: typescript-service
      PROJECT_MODE: development
    ports:
      - "5246:5246"   # Hash-generated unique TypeScript dev port
    command: ["bash", "-lc", "npm ci && npm run dev -- --host"]

  # Optional: writable variant for heavy local workflows (disables read_only)
  dev-write:
    <<: *common
    container_name: solution-desk-engine-dev-write
    profiles: ["write"]
    read_only: false
    tmpfs:
      - /tmp:rw,nosuid,nodev,noexec,size=64m

# Build/run secrets (DON'T commit the file with the token)
secrets:
  github_token:
    file: .secrets/github_token  # create this file with your token (contents = token)

volumes:
  workspace:
  pip-cache:
  poetry-cache:
  node-cache:
  direnv-config:

# Unique network per project to prevent conflicts
networks:
  default:
    ipam:
      config:
        - subnet: "172.57.0.0/24"
